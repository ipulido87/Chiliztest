{
	"info": {
		"_postman_id": "be68d9d1-6086-4e11-a49c-53a62508692f",
		"name": "Chiliz",
		"schema": "https://schema.getpostman.com/json/collection/v2.0.0/collection.json",
		"_exporter_id": "14599679"
	},
	"item": [
		{
			"name": "https://api.publicapis.org/entries",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//2  Store the json response in a variable named jsonData\r",
							"\r",
							"var jsonData = pm.response.json();\r",
							"\r",
							"//Store the Count key value in variable, set it in an environment variable, then print the environment variable in the console, and unset the environment variable\r",
							"\r",
							"var countData =  jsonData.count;\r",
							"pm.variables.set(\"apiPublica\", countData);\r",
							"console.log(pm.environment.get(\"apiPublica\"));\r",
							"//pm.environment.unset(\"apiPublica\"); i have commented this line because  of if unset enviroment varible \r",
							"\r",
							"//4. Create a function to verify that Count text is present in response\r",
							"\r",
							"const Count_text_is_present = (jsonData) => {\r",
							"  const Text = \"AdoptAPet\";\r",
							"  const responseBodyText = responseBody.toLowerCase();\r",
							"  const isThereaText = responseBodyText.includes(Text.toLowerCase());\r",
							"\r",
							"  console.log(`The text '${Text}' is ${isThereaText ? 'Right' : 'Foult'} in the response.`);\r",
							"  return isThereaText;\r",
							"};\r",
							"\r",
							"Count_text_is_present();\r",
							"\r",
							"5//Create a function to verify that Count key value is greater than 600 \r",
							"\r",
							"  const verifyIfIsGreaterThan600 = (jsonData) => {\r",
							"    console.log(countData);\r",
							"  if (countData > 600) {\r",
							"    console.log(\"The 'countData' value is greater than 600.\");\r",
							"    return true;\r",
							"  } else {\r",
							"    console.log(\"The 'countData' value is not greater than 600.\");\r",
							"    return false;\r",
							"  }\r",
							"\r",
							"};\r",
							"\r",
							"verifyIfIsGreaterThan600(jsonData);\r",
							"\r",
							"//6. Create a function to verify that first object API key value is equal to AdoptAPet\r",
							"\r",
							"const verifyThatFirstObjectIsEqualAdoptApet = (jsonData) => {\r",
							"  if (jsonData.entries.length > 0 && jsonData.entries[0].API === \"AdoptAPet\") {\r",
							"    console.log(\"The first object is AdoptAPet.\");\r",
							"    return true;\r",
							"  } else {\r",
							"    console.log(\"The first object is NOT AdoptAPet.\");\r",
							"    return false;\r",
							"  }\r",
							"  \r",
							"};\r",
							"\r",
							"const isFirstObjectAPIEqual = verifyThatFirstObjectIsEqualAdoptApet(jsonData);\r",
							"\r",
							"//7. Create a function to print in the console the description Key value\r",
							"\r",
							"const printConsoleDescriptionValue = (jsonData) => {\r",
							"  if (jsonData.entries.length > 0) {\r",
							"    const descriptionValue = jsonData.entries[0].Description;\r",
							"    console.log(\"Description :\", descriptionValue);\r",
							"  } else {\r",
							"    console.log(\"No matching entries were found in the JSON data.\");\r",
							"  }\r",
							"};\r",
							"\r",
							"printConsoleDescriptionValue(jsonData);\r",
							"\r",
							"// 8. Create a function to verify that the response status is 200\r",
							"\r",
							"const checkIsStatus200 = (status) => {\r",
							"  console.log(\"The response is:\", status);\r",
							"  \r",
							"  if (status === 200) {\r",
							"    console.log(\"status is 200 OK.\");\r",
							"    return true;\r",
							"  } else {\r",
							"    console.log(\"status is diferent to 200 KO.....\");\r",
							"    return false;\r",
							"  }\r",
							"};\r",
							"\r",
							"const responseStatus = pm.response.code;\r",
							"const isResponseStatus200 = checkIsStatus200(responseStatus);\r",
							"\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": "{{apiPublica}}/entries"
			},
			"response": []
		}
	]
}